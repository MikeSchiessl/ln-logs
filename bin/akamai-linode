#!/usr/bin/env python3

import sys
import threading, signal
import os

import ln_config.default_config as default_cfg
import ln_config.version as cli_version
import modules.argsParser as args
import modules.generic as generic
import modules.aka_log as aka_log
import modules.events as ln_events
import modules.utilization as ln_utilization


stopEvent = threading.Event()


def sigterm_handler(signum, frame):
    """
    Upon SIGTERM, we signal any other pending activities
    to stop right away
    """
    aka_log.log.debug(f"SIGTERM ({signum}) detected, setting stopEvent")
    stopEvent.set()


def control_break_handler():
    """
    Upon CTRL + C, we signal any other pending activities
    to stop right away
    """
    aka_log.log.debug("Control+C detected, setting stopEvent")
    stopEvent.set()

def main():
    signal.signal(signal.SIGTERM, sigterm_handler)
    signal.signal(signal.SIGINT, sigterm_handler)


    my_args = args.init()

    # Load the LOG system
    aka_log.init(my_args.loglevel, cli_version.__tool_name_short__)

    # Show Version
    if my_args.version:
        generic.version()

    # Pre Flight checks
    if my_args.command:
        try:
            edgerc_data = generic.edgerc_reader(configfile=my_args.credentials_file,
                                configsection=my_args.credentials_file_section,
                                configvalues=["linode_token","linode_hostname"])
        except:
            print(f"Try akamai-ln --help")
            sys.exit()

    try:
        if my_args.command in ['events', 'e']:
            if my_args.event_action == "audit":
                ln_events.audit(given_args=my_args, ln_edgerc=edgerc_data, stop_event=stopEvent)
            else:
                print(f"No - action given. Try {cli_version.__tool_binary__} --help")
                sys.exit()
        elif my_args.command in ['utilization', 'u']:
            ln_utilization.stats(ln_edgerc=edgerc_data, stackscript=my_args.stackscripts, follow=my_args.follow, stop_event=stopEvent, follow_interval_sec=my_args.utilization_refresh_time)
        else:
            print(f"No - command given. Try {cli_version.__tool_binary__} --help ")
            sys.exit()
    except BrokenPipeError:
        # Python flushes standard streams on exit; redirect remaining output
        # to devnull to avoid another BrokenPipeError at shutdown
        devnull = os.open(os.devnull, os.O_WRONLY)
        os.dup2(devnull, sys.stdout.fileno())
        sys.exit(1)  # Python exits with error code 1 on EPIPE

    if stopEvent.is_set():
        sys.exit(100)


if __name__ == "__main__":
    main()

# EOF